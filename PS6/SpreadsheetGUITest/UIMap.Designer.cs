// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// DivideByZero - Use 'DivideByZeroParams' to pass parameters into this method.
        /// </summary>
        public void DivideByZero()
        {
            #region Variable Declarations
            WinClient uISsPanelClient = this.UISpreadsheetWindow.UIItemWindow.UISsPanelClient;
            WinClient uISsPanelClient1 = this.UISpreadsheetWindow.UISsPanelWindow.UISsPanelClient;
            WinEdit uIContentsTextBoxEdit = this.UISpreadsheetWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.DivideByZeroParams.UISpreadsheetWindowExePath, this.DivideByZeroParams.UISpreadsheetWindowAlternateExePath);

            // Click 'ssPanel' client
            Mouse.Click(uISsPanelClient, new Point(54, 35));

            // Type '{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient1, this.DivideByZeroParams.UISsPanelClientSendKeys, ModifierKeys.None);

            // Type '1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.DivideByZeroParams.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.DivideByZeroParams.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Right}{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient1, this.DivideByZeroParams.UISsPanelClientSendKeys1, ModifierKeys.None);

            // Type '0' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.DivideByZeroParams.UIContentsTextBoxEditText1;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.DivideByZeroParams.UIContentsTextBoxEditSendKeys1, ModifierKeys.None);

            // Type '{Right}{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient1, this.DivideByZeroParams.UISsPanelClientSendKeys2, ModifierKeys.None);

            // Type '=a1/b1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.DivideByZeroParams.UIContentsTextBoxEditText2;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.DivideByZeroParams.UIContentsTextBoxEditSendKeys2, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(48, 14));
        }
        
        /// <summary>
        /// Basic Opening and Closing Test
        /// </summary>
        public void OpenAndClose()
        {
            #region Variable Declarations
            WinClient uISsPanelClient = this.UISpreadsheetWindow.UISsPanelWindow.UISsPanelClient;
            WinEdit uIContentsTextBoxEdit = this.UISpreadsheetWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinButton uINOButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UINOButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.OpenAndCloseParams.UISpreadsheetWindowExePath, this.OpenAndCloseParams.UISpreadsheetWindowAlternateExePath);

            // Type '{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.OpenAndCloseParams.UISsPanelClientSendKeys, ModifierKeys.None);

            // Type 'moo' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.OpenAndCloseParams.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.OpenAndCloseParams.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type 'Control + s' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.OpenAndCloseParams.UISsPanelClientSendKeys1, ModifierKeys.Control);

            // Select 'moo' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.OpenAndCloseParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.OpenAndCloseParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Type '{Left}' in '&No' button
            Keyboard.SendKeys(uINOButton, this.OpenAndCloseParams.UINOButtonSendKeys, ModifierKeys.None);

            // Type '{Enter}' in '&Yes' button
            Keyboard.SendKeys(uIYesButton, this.OpenAndCloseParams.UIYesButtonSendKeys, ModifierKeys.None);

            // Type 'Alt + {F4}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.OpenAndCloseParams.UISsPanelClientSendKeys2, ModifierKeys.Alt);
        }
        
        /// <summary>
        /// Open a new spreadsheet, and try to break some rules
        /// </summary>
        public void OpenAndDivideByZero()
        {
            #region Variable Declarations
            WinClient uISsPanelClient = this.UISpreadsheetWindow.UISsPanelWindow.UISsPanelClient;
            WinEdit uIContentsTextBoxEdit = this.UISpreadsheetWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.OpenAndDivideByZeroParams.UISpreadsheetWindowExePath, this.OpenAndDivideByZeroParams.UISpreadsheetWindowAlternateExePath);

            // Type '{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.OpenAndDivideByZeroParams.UISsPanelClientSendKeys, ModifierKeys.None);

            // Type '=1/0' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.OpenAndDivideByZeroParams.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.OpenAndDivideByZeroParams.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.OpenAndDivideByZeroParams.UIOKButtonSendKeys, ModifierKeys.None);

            // Type '={Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.OpenAndDivideByZeroParams.UISsPanelClientSendKeys1, ModifierKeys.None);

            // Type '=b1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.OpenAndDivideByZeroParams.UIContentsTextBoxEditText1;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.OpenAndDivideByZeroParams.UIContentsTextBoxEditSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.OpenAndDivideByZeroParams.UIOKButtonSendKeys1, ModifierKeys.None);

            // Type '{Right}0{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.OpenAndDivideByZeroParams.UISsPanelClientSendKeys2, ModifierKeys.None);

            // Type '0' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.OpenAndDivideByZeroParams.UIContentsTextBoxEditText2;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.OpenAndDivideByZeroParams.UIContentsTextBoxEditSendKeys2, ModifierKeys.None);

            // Type '{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.OpenAndDivideByZeroParams.UISsPanelClientSendKeys3, ModifierKeys.None);

            // Type '=a1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.OpenAndDivideByZeroParams.UIContentsTextBoxEditText3;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.OpenAndDivideByZeroParams.UIContentsTextBoxEditSendKeys3, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.OpenAndDivideByZeroParams.UIOKButtonSendKeys2, ModifierKeys.None);

            // Type '{Down}{Right}{Up}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.OpenAndDivideByZeroParams.UISsPanelClientSendKeys4, ModifierKeys.None);
        }
        
        /// <summary>
        /// Switch between English and Japanese
        /// </summary>
        public void ChangeLanguages()
        {
            #region Variable Declarations
            WinMenuBar uIMenuStripMenuBar = this.UISpreadsheetWindow.UIMenuStrip1Window.UIMenuStripMenuBar;
            WinMenuItem uI日本語MenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIOptionsMenuItem.UILanguageMenuItem.UI日本語MenuItem;
            WinEdit uIContentsTextBoxEdit = this.UISpreadsheetWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            WinMenuItem uIEnglishMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIオプションMenuItem.UI言語MenuItem.UIEnglishMenuItem;
            #endregion

            // Click 'menuStrip' menu bar
            Mouse.Click(uIMenuStripMenuBar, new Point(68, 1));

            // Click 'Options' -> 'Language' -> '日本語' menu item
            Mouse.Click(uI日本語MenuItem, new Point(24, 7));

            // Type 'hi' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.ChangeLanguagesParams.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.ChangeLanguagesParams.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'オプション' -> '言語' -> 'English' menu item
            Mouse.Click(uIEnglishMenuItem, new Point(36, 13));
        }
        
        /// <summary>
        /// Opening and saving different ways
        /// </summary>
        public void SaveAndSaveAs()
        {
            #region Variable Declarations
            WinClient uISsPanelClient = this.UISpreadsheetWindow.UISsPanelWindow.UISsPanelClient;
            WinButton uINOButton = this.UISpreadsheetWindow1.UINOWindow.UINOButton;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinButton uINOButton1 = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UINOButton;
            WinComboBox uIFilenameComboBox1 = this.UIOpenWindow.UIItemWindow.UIFilenameComboBox;
            WinEdit uIFilenameEdit1 = this.UIOpenWindow.UIItemWindow1.UIFilenameEdit;
            WinMenuItem uISaveAsMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Type 'Control + o' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.SaveAndSaveAsParams.UISsPanelClientSendKeys, ModifierKeys.Control);

            // Type '{Enter}' in '&No' button
            Keyboard.SendKeys(uINOButton, this.SaveAndSaveAsParams.UINOButtonSendKeys, ModifierKeys.None);

            // Type 'Control + s' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.SaveAndSaveAsParams.UISsPanelClientSendKeys1, ModifierKeys.Control);

            // Select 'demo' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAndSaveAsParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.SaveAndSaveAsParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click '&No' button
            Mouse.Click(uINOButton1, new Point(33, 18));

            // Select 'ui2' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAndSaveAsParams.UIFilenameComboBoxEditableItem1;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.SaveAndSaveAsParams.UIFilenameEditSendKeys1, ModifierKeys.None);

            // Type 'Control + o' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.SaveAndSaveAsParams.UISsPanelClientSendKeys2, ModifierKeys.Control);

            // Select 'demo.ss' in 'File name:' combo box
            uIFilenameComboBox1.EditableItem = this.SaveAndSaveAsParams.UIFilenameComboBoxEditableItem2;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit1, this.SaveAndSaveAsParams.UIFilenameEditSendKeys2, ModifierKeys.None);

            // Click 'File' -> 'Save As...' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(75, 17));

            // Select 'C:\Users\Tim\Documents\demo2.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAndSaveAsParams.UIFilenameComboBoxEditableItem3;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(46, 13));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(43, 16));
        }
        
        /// <summary>
        /// Resizes the form, and adds then deletes a value
        /// </summary>
        public void ResizeAndDelete()
        {
            #region Variable Declarations
            WinStatusBar uIStatusStripStatusBar = this.UISpreadsheetWindow.UIStatusStrip1Window.UIStatusStripStatusBar;
            WinClient uISsPanelClient = this.UISpreadsheetWindow.UISsPanelWindow.UISsPanelClient;
            WinEdit uIContentsTextBoxEdit = this.UISpreadsheetWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.ResizeAndDeleteParams.UISpreadsheetWindowExePath, this.ResizeAndDeleteParams.UISpreadsheetWindowAlternateExePath);

            // Click 'statusStrip' status bar
            Mouse.Click(uIStatusStripStatusBar, new Point(655, 15));

            // Type '{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.ResizeAndDeleteParams.UISsPanelClientSendKeys, ModifierKeys.None);

            // Type '52' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.ResizeAndDeleteParams.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.ResizeAndDeleteParams.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Delete}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.ResizeAndDeleteParams.UISsPanelClientSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// Tries to create a circular dependency
        /// </summary>
        public void CircularDependency()
        {
            #region Variable Declarations
            WinClient uISsPanelClient = this.UISpreadsheetWindow.UIItemWindow.UISsPanelClient;
            WinClient uISsPanelClient1 = this.UISpreadsheetWindow.UISsPanelWindow.UISsPanelClient;
            WinEdit uIContentsTextBoxEdit = this.UISpreadsheetWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Click 'ssPanel' client
            Mouse.Click(uISsPanelClient, new Point(84, 39));

            // Type '{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient1, this.CircularDependencyParams.UISsPanelClientSendKeys, ModifierKeys.None);

            // Type '=b1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.CircularDependencyParams.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.CircularDependencyParams.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.CircularDependencyParams.UIOKButtonSendKeys, ModifierKeys.None);

            // Type '{Right}{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient1, this.CircularDependencyParams.UISsPanelClientSendKeys1, ModifierKeys.None);

            // Type '=a1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.CircularDependencyParams.UIContentsTextBoxEditText1;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.CircularDependencyParams.UIContentsTextBoxEditSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.CircularDependencyParams.UIOKButtonSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// Resize - Use 'ResizeParams' to pass parameters into this method.
        /// </summary>
        public void Resize()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.ResizeParams.UISpreadsheetWindowExePath, this.ResizeParams.UISpreadsheetWindowAlternateExePath);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(23, 17));
        }
        
        /// <summary>
        /// Moves the cell selection around with arrow keys
        /// </summary>
        public void ArrowKeys()
        {
            #region Variable Declarations
            WinClient uISsPanelClient = this.UISpreadsheetWindow.UIItemWindow.UISsPanelClient;
            WinClient uISsPanelClient1 = this.UISpreadsheetWindow.UISsPanelWindow.UISsPanelClient;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.ArrowKeysParams.UISpreadsheetWindowExePath, this.ArrowKeysParams.UISpreadsheetWindowAlternateExePath);

            // Click 'ssPanel' client
            Mouse.Click(uISsPanelClient, new Point(208, 107));

            // Type '{Left}{Down}{Right}{Up}{Left}{Down}{Right}{Up}{Left}{Down}{Right}{Up}{Left}{Down}{Right}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient1, this.ArrowKeysParams.UISsPanelClientSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Types in a cell, then deletes the cell
        /// </summary>
        public void Delete()
        {
            #region Variable Declarations
            WinClient uISsPanelClient = this.UISpreadsheetWindow.UIItemWindow.UISsPanelClient;
            WinClient uISsPanelClient1 = this.UISpreadsheetWindow.UISsPanelWindow.UISsPanelClient;
            WinEdit uIContentsTextBoxEdit = this.UISpreadsheetWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            #endregion

            // Click 'ssPanel' client
            Mouse.Click(uISsPanelClient, new Point(231, 104));

            // Type '{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient1, this.DeleteParams.UISsPanelClientSendKeys, ModifierKeys.None);

            // Type 'kk' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.DeleteParams.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.DeleteParams.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Delete}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient1, this.DeleteParams.UISsPanelClientSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// Opens and then selects "new form"
        /// </summary>
        public void OpenAndNew()
        {
            #region Variable Declarations
            WinClient uISsPanelClient = this.UISpreadsheetWindow.UISsPanelWindow.UISsPanelClient;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.OpenAndNewParams.UISpreadsheetWindowExePath, this.OpenAndNewParams.UISpreadsheetWindowAlternateExePath);

            // Type 'Control + n' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.OpenAndNewParams.UISsPanelClientSendKeys, ModifierKeys.Control);
        }
        
        /// <summary>
        /// Open a new window and save
        /// </summary>
        public void OpenNewWindowSave()
        {
            #region Variable Declarations
            WinClient uISsPanelClient = this.UISpreadsheetWindow.UISsPanelWindow.UISsPanelClient;
            WinEdit uIContentsTextBoxEdit = this.UISpreadsheetWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UINewMenuItem;
            WinButton uINOButton = this.UISpreadsheetWindow1.UINOWindow.UINOButton;
            WinMenuItem uIOpeninNewWindowMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UIOpeninNewWindowMenuItem;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow.UIFilenameComboBox;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem;
            WinClient uISsPanelClient1 = this.UISpreadsheetWindow.UIItemWindow.UISsPanelClient;
            WinEdit uIContentsTextBoxEdit1 = this.UISpreadsheetWindow.UIItem6Window.UIContentsTextBoxEdit;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UISaveMenuItem;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinMenuItem uISaveAsMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinComboBox uIFilenameComboBox1 = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinButton uICloseButton1 = this.UISpreadsheetWindow.UISpreadsheetTitleBar1.UICloseButton;
            WinButton uIYesButton1 = this.UISpreadsheetWindow1.UIYesWindow.UIYesButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.OpenNewWindowSaveParams.UISpreadsheetWindowExePath, this.OpenNewWindowSaveParams.UISpreadsheetWindowAlternateExePath);

            // Type '{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.OpenNewWindowSaveParams.UISsPanelClientSendKeys, ModifierKeys.None);

            // Type 'blag' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.OpenNewWindowSaveParams.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.OpenNewWindowSaveParams.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(62, 15));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(31, 11));

            // Click 'File' -> 'Open in New Window' menu item
            Mouse.Click(uIOpeninNewWindowMenuItem, new Point(51, 15));

            // Select 'demo.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.OpenNewWindowSaveParams.UIFilenameComboBoxEditableItem;

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(39, 13));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(9, 17));

            // Click 'ssPanel' client
            Mouse.Click(uISsPanelClient1, new Point(279, 65));

            // Click 'ssPanel' client
            Mouse.Click(uISsPanelClient1, new Point(70, 63));

            // Type 'gg{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.OpenNewWindowSaveParams.UISsPanelClientSendKeys1, ModifierKeys.None);

            // Type 'g' in 'contentsTextBox' text box
            uIContentsTextBoxEdit1.Text = this.OpenNewWindowSaveParams.UIContentsTextBoxEditText1;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit1, this.OpenNewWindowSaveParams.UIContentsTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(68, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 11));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(36, 17));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(33, 6));

            // Click 'File' -> 'Save As...' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(37, 8));

            // Select 'demo' in 'File name:' combo box
            uIFilenameComboBox1.EditableItem = this.OpenNewWindowSaveParams.UIFilenameComboBoxEditableItem1;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.OpenNewWindowSaveParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(27, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(20, 16));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(58, 10));
        }
        
        /// <summary>
        /// Opens the help menu
        /// </summary>
        public void HelpText()
        {
            #region Variable Declarations
            WinMenuItem uIHowtouseSpreadsheetMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIHelpMenuItem.UIHowtouseSpreadsheetMenuItem;
            WinButton uIOKButton = this.UISpreadsheetWindow1.UIOKWindow.UIOKButton;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.HelpTextParams.UISpreadsheetWindowExePath, this.HelpTextParams.UISpreadsheetWindowAlternateExePath);

            // Click 'Help' -> 'How to use Spreadsheet' menu item
            Mouse.Click(uIHowtouseSpreadsheetMenuItem, new Point(53, 15));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(32, 8));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(59, 11));
        }
        
        /// <summary>
        /// PressCancel
        /// </summary>
        public void PressCancel()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UISaveAsWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(37, 13));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(37, 13));
        }
        
        /// <summary>
        /// OpenNothing - Use 'OpenNothingParams' to pass parameters into this method.
        /// </summary>
        public void OpenNothing()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinButton uICancelButton = this.UIOpenWindow.UICancelWindow.UICancelButton;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.OpenNothingParams.UISpreadsheetWindowExePath, this.OpenNothingParams.UISpreadsheetWindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(31, 0));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(38, 14));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(15, 13));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 14));
        }
        
        /// <summary>
        /// Maximize - Use 'MaximizeParams' to pass parameters into this method.
        /// </summary>
        public void Maximize()
        {
            #region Variable Declarations
            WinWindow uISpreadsheetWindow1 = this.UISpreadsheetWindow;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.MaximizeParams.UISpreadsheetWindowExePath, this.MaximizeParams.UISpreadsheetWindowAlternateExePath);

            // Restore window 'Spreadsheet'
            uISpreadsheetWindow1.Restored = this.MaximizeParams.UISpreadsheetWindowRestored;

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(28, 4));
        }
        
        /// <summary>
        /// InvalidTokens - Use 'InvalidTokensParams' to pass parameters into this method.
        /// </summary>
        public void InvalidTokens()
        {
            #region Variable Declarations
            WinClient uISsPanelClient = this.UISpreadsheetWindow.UISsPanelWindow.UISsPanelClient;
            WinEdit uIContentsTextBoxEdit = this.UISpreadsheetWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinButton uIYesButton = this.UISpreadsheetWindow1.UIYesWindow.UIYesButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.InvalidTokensParams.UISpreadsheetWindowExePath, this.InvalidTokensParams.UISpreadsheetWindowAlternateExePath);

            // Type '{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.InvalidTokensParams.UISsPanelClientSendKeys, ModifierKeys.None);

            // Type '=+' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.InvalidTokensParams.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.InvalidTokensParams.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.InvalidTokensParams.UIOKButtonSendKeys, ModifierKeys.None);

            // Type '=aa1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.InvalidTokensParams.UIContentsTextBoxEditText1;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.InvalidTokensParams.UIContentsTextBoxEditSendKeys1, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.InvalidTokensParams.UIOKButtonSendKeys1, ModifierKeys.None);

            // Type '' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.InvalidTokensParams.UIContentsTextBoxEditText2;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.InvalidTokensParams.UIContentsTextBoxEditSendKeys2, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(9, 7));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(29, 7));
        }
        
        /// <summary>
        /// Save - Use 'SaveParams' to pass parameters into this method.
        /// </summary>
        public void Save()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow2.UITrappedincomputerssListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinClient uISsPanelClient = this.UISpreadsheetWindow.UISsPanelWindow.UISsPanelClient;
            WinEdit uIContentsTextBoxEdit = this.UISpreadsheetWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UISaveMenuItem;
            WinClient uISsPanelClient1 = this.UISpreadsheetWindow.UIItemWindow.UISsPanelClient;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinButton uIYesButton = this.UISpreadsheetWindow1.UIYesWindow.UIYesButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.SaveParams.UISpreadsheetWindowExePath, this.SaveParams.UISpreadsheetWindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(39, 9));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(93, 8));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(40, 15));

            // Type 'x{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.SaveParams.UISsPanelClientSendKeys, ModifierKeys.None);

            // Type 'xs' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.SaveParams.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.SaveParams.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(44, 12));

            // Click 'ssPanel' client
            Mouse.Click(uISsPanelClient1, new Point(135, 43));

            // Type '{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.SaveParams.UISsPanelClientSendKeys1, ModifierKeys.None);

            // Type 'moo' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.SaveParams.UIContentsTextBoxEditText1;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.SaveParams.UIContentsTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(39, 4));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(29, 7));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(51, 15));
        }
        
        /// <summary>
        /// OpenInNewWindow - Use 'OpenInNewWindowParams' to pass parameters into this method.
        /// </summary>
        public void OpenInNewWindow()
        {
            #region Variable Declarations
            WinMenuItem uIOpeninNewWindowMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UIOpeninNewWindowMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow2.UISomefilessListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinClient uISsPanelClient = this.UISpreadsheetCUsersTimWindow.UIItemWindow.UISsPanelClient;
            WinClient uISsPanelClient1 = this.UISpreadsheetCUsersTimWindow.UISsPanelWindow.UISsPanelClient;
            WinEdit uIContentsTextBoxEdit = this.UISpreadsheetCUsersTimWindow.UIItem0Window.UIContentsTextBoxEdit;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetCUsersTimWindow.UIMenuStripMenuBar.UIFileMenuItem.UISaveMenuItem;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetCUsersTimWindow.UIMenuStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIYesButton = this.UISpreadsheetWindow1.UIYesWindow.UIYesButton;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.OpenInNewWindowParams.UISpreadsheetWindowExePath, this.OpenInNewWindowParams.UISpreadsheetWindowAlternateExePath);

            // Click 'File' -> 'Open in New Window' menu item
            Mouse.Click(uIOpeninNewWindowMenuItem, new Point(64, 18));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(33, 8));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(26, 17));

            // Click 'ssPanel' client
            Mouse.Click(uISsPanelClient, new Point(141, 49));

            // Type '{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient1, this.OpenInNewWindowParams.UISsPanelClientSendKeys, ModifierKeys.None);

            // Type 'lol' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.OpenInNewWindowParams.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.OpenInNewWindowParams.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type 'Control + s' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient1, this.OpenInNewWindowParams.UISsPanelClientSendKeys1, ModifierKeys.Control);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(38, 4));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(32, 19));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(26, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 15));
        }
        
        /// <summary>
        /// Saving - Use 'SavingParams' to pass parameters into this method.
        /// </summary>
        public void Saving()
        {
            #region Variable Declarations
            WinClient uISsPanelClient = this.UISpreadsheetWindow.UISsPanelWindow.UISsPanelClient;
            WinEdit uIContentsTextBoxEdit = this.UISpreadsheetWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIOpeninNewWindowMenuItem = this.UISpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UIOpeninNewWindowMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow2.UIGalaxyS3ListItem.UINameEdit;
            WinList uIItemsViewList = this.UIOpenWindow.UIShellViewClient.UIItemsViewList;
            WinListItem uINewfilessListItem = this.UIOpenWindow.UIItemWindow2.UIItemsViewList.UINewfilessListItem;
            WinClient uISsPanelClient1 = this.UISpreadsheetCUsersTimWindow1.UISsPanelWindow.UISsPanelClient;
            WinEdit uIContentsTextBoxEdit1 = this.UISpreadsheetCUsersTimWindow1.UIEatingfoodWindow.UIContentsTextBoxEdit;
            WinMenuItem uIFileMenuItem = this.UISpreadsheetCUsersTimWindow1.UIMenuStripMenuBar.UIFileMenuItem;
            WinTitleBar uISpreadsheetCUsersTimTitleBar = this.UISpreadsheetCUsersTimWindow1.UISpreadsheetCUsersTimTitleBar;
            WinButton uICloseButton = this.UISpreadsheetCUsersTimWindow1.UISpreadsheetCUsersTimTitleBar.UICloseButton;
            WinButton uIYesButton = this.UISpreadsheetWindow1.UIYesWindow.UIYesButton;
            WinButton uICloseButton1 = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.SavingParams.UISpreadsheetWindowExePath, this.SavingParams.UISpreadsheetWindowAlternateExePath);

            // Type '{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.SavingParams.UISsPanelClientSendKeys, ModifierKeys.None);

            // Type 'eatingfood' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.SavingParams.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.SavingParams.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type 'Control + s' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient, this.SavingParams.UISsPanelClientSendKeys1, ModifierKeys.Control);

            // Select 'newfile' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SavingParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.SavingParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(18, 5));

            // Click 'File' -> 'Open in New Window' menu item
            Mouse.Click(uIOpeninNewWindowMenuItem, new Point(50, 9));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(141, 4));

            // Select '' in 'Items View' list box
            uIItemsViewList.SelectedItemsAsString = this.SavingParams.UIItemsViewListSelectedItemsAsString;

            // Type '{Enter}' in 'newfile.ss' list item
            Keyboard.SendKeys(uINewfilessListItem, this.SavingParams.UINewfilessListItemSendKeys, ModifierKeys.None);

            // Type '{Delete}no{Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient1, this.SavingParams.UISsPanelClientSendKeys2, ModifierKeys.None);

            // Type 'nothing' in 'contentsTextBox' text box
            uIContentsTextBoxEdit1.Text = this.SavingParams.UIContentsTextBoxEditText1;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit1, this.SavingParams.UIContentsTextBoxEditSendKeys1, ModifierKeys.None);

            // Type 'Control + s' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient1, this.SavingParams.UISsPanelClientSendKeys3, ModifierKeys.Control);

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(9, 13));

            // Click 'Spreadsheet - C:\Users\Tim\Documents\newfile.ss' title bar
            Mouse.Click(uISpreadsheetCUsersTimTitleBar, new Point(206, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(28, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(59, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(35, 7));
        }
        
        /// <summary>
        /// Circular - Use 'CircularParams' to pass parameters into this method.
        /// </summary>
        public void Circular()
        {
            #region Variable Declarations
            WinClient uISsPanelClient = this.UISpreadsheetWindow.UIItemWindow.UISsPanelClient;
            WinClient uISsPanelClient1 = this.UISpreadsheetWindow.UISsPanelWindow.UISsPanelClient;
            WinEdit uIContentsTextBoxEdit = this.UISpreadsheetWindow.UIContentsTextBoxWindow.UIContentsTextBoxEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.CircularParams.UISpreadsheetWindowExePath, this.CircularParams.UISpreadsheetWindowAlternateExePath);

            // Click 'ssPanel' client
            Mouse.Click(uISsPanelClient, new Point(82, 38));

            // Type '={Enter}' in 'ssPanel' client
            Keyboard.SendKeys(uISsPanelClient1, this.CircularParams.UISsPanelClientSendKeys, ModifierKeys.None);

            // Type '=a1' in 'contentsTextBox' text box
            uIContentsTextBoxEdit.Text = this.CircularParams.UIContentsTextBoxEditText;

            // Type '{Enter}' in 'contentsTextBox' text box
            Keyboard.SendKeys(uIContentsTextBoxEdit, this.CircularParams.UIContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.CircularParams.UIOKButtonSendKeys, ModifierKeys.None);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(16, 11));
        }
        
        #region Properties
        public virtual DivideByZeroParams DivideByZeroParams
        {
            get
            {
                if ((this.mDivideByZeroParams == null))
                {
                    this.mDivideByZeroParams = new DivideByZeroParams();
                }
                return this.mDivideByZeroParams;
            }
        }
        
        public virtual OpenAndCloseParams OpenAndCloseParams
        {
            get
            {
                if ((this.mOpenAndCloseParams == null))
                {
                    this.mOpenAndCloseParams = new OpenAndCloseParams();
                }
                return this.mOpenAndCloseParams;
            }
        }
        
        public virtual OpenAndDivideByZeroParams OpenAndDivideByZeroParams
        {
            get
            {
                if ((this.mOpenAndDivideByZeroParams == null))
                {
                    this.mOpenAndDivideByZeroParams = new OpenAndDivideByZeroParams();
                }
                return this.mOpenAndDivideByZeroParams;
            }
        }
        
        public virtual ChangeLanguagesParams ChangeLanguagesParams
        {
            get
            {
                if ((this.mChangeLanguagesParams == null))
                {
                    this.mChangeLanguagesParams = new ChangeLanguagesParams();
                }
                return this.mChangeLanguagesParams;
            }
        }
        
        public virtual SaveAndSaveAsParams SaveAndSaveAsParams
        {
            get
            {
                if ((this.mSaveAndSaveAsParams == null))
                {
                    this.mSaveAndSaveAsParams = new SaveAndSaveAsParams();
                }
                return this.mSaveAndSaveAsParams;
            }
        }
        
        public virtual ResizeAndDeleteParams ResizeAndDeleteParams
        {
            get
            {
                if ((this.mResizeAndDeleteParams == null))
                {
                    this.mResizeAndDeleteParams = new ResizeAndDeleteParams();
                }
                return this.mResizeAndDeleteParams;
            }
        }
        
        public virtual CircularDependencyParams CircularDependencyParams
        {
            get
            {
                if ((this.mCircularDependencyParams == null))
                {
                    this.mCircularDependencyParams = new CircularDependencyParams();
                }
                return this.mCircularDependencyParams;
            }
        }
        
        public virtual ResizeParams ResizeParams
        {
            get
            {
                if ((this.mResizeParams == null))
                {
                    this.mResizeParams = new ResizeParams();
                }
                return this.mResizeParams;
            }
        }
        
        public virtual ArrowKeysParams ArrowKeysParams
        {
            get
            {
                if ((this.mArrowKeysParams == null))
                {
                    this.mArrowKeysParams = new ArrowKeysParams();
                }
                return this.mArrowKeysParams;
            }
        }
        
        public virtual DeleteParams DeleteParams
        {
            get
            {
                if ((this.mDeleteParams == null))
                {
                    this.mDeleteParams = new DeleteParams();
                }
                return this.mDeleteParams;
            }
        }
        
        public virtual OpenAndNewParams OpenAndNewParams
        {
            get
            {
                if ((this.mOpenAndNewParams == null))
                {
                    this.mOpenAndNewParams = new OpenAndNewParams();
                }
                return this.mOpenAndNewParams;
            }
        }
        
        public virtual OpenNewWindowSaveParams OpenNewWindowSaveParams
        {
            get
            {
                if ((this.mOpenNewWindowSaveParams == null))
                {
                    this.mOpenNewWindowSaveParams = new OpenNewWindowSaveParams();
                }
                return this.mOpenNewWindowSaveParams;
            }
        }
        
        public virtual HelpTextParams HelpTextParams
        {
            get
            {
                if ((this.mHelpTextParams == null))
                {
                    this.mHelpTextParams = new HelpTextParams();
                }
                return this.mHelpTextParams;
            }
        }
        
        public virtual OpenNothingParams OpenNothingParams
        {
            get
            {
                if ((this.mOpenNothingParams == null))
                {
                    this.mOpenNothingParams = new OpenNothingParams();
                }
                return this.mOpenNothingParams;
            }
        }
        
        public virtual MaximizeParams MaximizeParams
        {
            get
            {
                if ((this.mMaximizeParams == null))
                {
                    this.mMaximizeParams = new MaximizeParams();
                }
                return this.mMaximizeParams;
            }
        }
        
        public virtual InvalidTokensParams InvalidTokensParams
        {
            get
            {
                if ((this.mInvalidTokensParams == null))
                {
                    this.mInvalidTokensParams = new InvalidTokensParams();
                }
                return this.mInvalidTokensParams;
            }
        }
        
        public virtual SaveParams SaveParams
        {
            get
            {
                if ((this.mSaveParams == null))
                {
                    this.mSaveParams = new SaveParams();
                }
                return this.mSaveParams;
            }
        }
        
        public virtual OpenInNewWindowParams OpenInNewWindowParams
        {
            get
            {
                if ((this.mOpenInNewWindowParams == null))
                {
                    this.mOpenInNewWindowParams = new OpenInNewWindowParams();
                }
                return this.mOpenInNewWindowParams;
            }
        }
        
        public virtual SavingParams SavingParams
        {
            get
            {
                if ((this.mSavingParams == null))
                {
                    this.mSavingParams = new SavingParams();
                }
                return this.mSavingParams;
            }
        }
        
        public virtual CircularParams CircularParams
        {
            get
            {
                if ((this.mCircularParams == null))
                {
                    this.mCircularParams = new CircularParams();
                }
                return this.mCircularParams;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UISpreadsheetWindow1 UISpreadsheetWindow1
        {
            get
            {
                if ((this.mUISpreadsheetWindow1 == null))
                {
                    this.mUISpreadsheetWindow1 = new UISpreadsheetWindow1();
                }
                return this.mUISpreadsheetWindow1;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UISpreadsheetCUsersTimWindow UISpreadsheetCUsersTimWindow
        {
            get
            {
                if ((this.mUISpreadsheetCUsersTimWindow == null))
                {
                    this.mUISpreadsheetCUsersTimWindow = new UISpreadsheetCUsersTimWindow();
                }
                return this.mUISpreadsheetCUsersTimWindow;
            }
        }
        
        public UISpreadsheetCUsersTimWindow1 UISpreadsheetCUsersTimWindow1
        {
            get
            {
                if ((this.mUISpreadsheetCUsersTimWindow1 == null))
                {
                    this.mUISpreadsheetCUsersTimWindow1 = new UISpreadsheetCUsersTimWindow1();
                }
                return this.mUISpreadsheetCUsersTimWindow1;
            }
        }
        #endregion
        
        #region Fields
        private DivideByZeroParams mDivideByZeroParams;
        
        private OpenAndCloseParams mOpenAndCloseParams;
        
        private OpenAndDivideByZeroParams mOpenAndDivideByZeroParams;
        
        private ChangeLanguagesParams mChangeLanguagesParams;
        
        private SaveAndSaveAsParams mSaveAndSaveAsParams;
        
        private ResizeAndDeleteParams mResizeAndDeleteParams;
        
        private CircularDependencyParams mCircularDependencyParams;
        
        private ResizeParams mResizeParams;
        
        private ArrowKeysParams mArrowKeysParams;
        
        private DeleteParams mDeleteParams;
        
        private OpenAndNewParams mOpenAndNewParams;
        
        private OpenNewWindowSaveParams mOpenNewWindowSaveParams;
        
        private HelpTextParams mHelpTextParams;
        
        private OpenNothingParams mOpenNothingParams;
        
        private MaximizeParams mMaximizeParams;
        
        private InvalidTokensParams mInvalidTokensParams;
        
        private SaveParams mSaveParams;
        
        private OpenInNewWindowParams mOpenInNewWindowParams;
        
        private SavingParams mSavingParams;
        
        private CircularParams mCircularParams;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UISpreadsheetWindow1 mUISpreadsheetWindow1;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UISpreadsheetCUsersTimWindow mUISpreadsheetCUsersTimWindow;
        
        private UISpreadsheetCUsersTimWindow1 mUISpreadsheetCUsersTimWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DivideByZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class DivideByZeroParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Right}{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys1 = "{Right}{Enter}";
        
        /// <summary>
        /// Type '0' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText1 = "0";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '{Right}{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys2 = "{Right}{Enter}";
        
        /// <summary>
        /// Type '=a1/b1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText2 = "=a1/b1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenAndClose'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class OpenAndCloseParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'moo' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "moo";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Control + s' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys1 = "s";
        
        /// <summary>
        /// Select 'moo' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "moo";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Left}' in '&No' button
        /// </summary>
        public string UINOButtonSendKeys = "{Left}";
        
        /// <summary>
        /// Type '{Enter}' in '&Yes' button
        /// </summary>
        public string UIYesButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Alt + {F4}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys2 = "{F4}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenAndDivideByZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class OpenAndDivideByZeroParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=1/0' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "=1/0";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '={Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys1 = "={Enter}";
        
        /// <summary>
        /// Type '=b1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText1 = "=b1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '{Right}0{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys2 = "{Right}0{Enter}";
        
        /// <summary>
        /// Type '0' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText2 = "0";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '=a1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText3 = "=a1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '{Down}{Right}{Up}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys4 = "{Down}{Right}{Up}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangeLanguages'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class ChangeLanguagesParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'hi' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "hi";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAndSaveAs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SaveAndSaveAsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + o' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys = "o";
        
        /// <summary>
        /// Type '{Enter}' in '&No' button
        /// </summary>
        public string UINOButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Control + s' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys1 = "s";
        
        /// <summary>
        /// Select 'demo' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "demo";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'ui2' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "ui2";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'Control + o' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys2 = "o";
        
        /// <summary>
        /// Select 'demo.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem2 = "demo.ss";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Select 'C:\Users\Tim\Documents\demo2.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem3 = "C:\\Users\\Tim\\Documents\\demo2.ss";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ResizeAndDelete'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class ResizeAndDeleteParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '52' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "52";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Delete}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys1 = "{Delete}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CircularDependency'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class CircularDependencyParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=b1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "=b1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Right}{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys1 = "{Right}{Enter}";
        
        /// <summary>
        /// Type '=a1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText1 = "=a1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Resize'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class ResizeParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ArrowKeys'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class ArrowKeysParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '{Left}{Down}{Right}{Up}{Left}{Down}{Right}{Up}{Left}{Down}{Right}{Up}{Left}{Down}{Right}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys = "{Left}{Down}{Right}{Up}{Left}{Down}{Right}{Up}{Left}{Down}{Right}{Up}{Left}{Down}" +
            "{Right}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Delete'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class DeleteParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'kk' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "kk";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Delete}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys1 = "{Delete}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenAndNew'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class OpenAndNewParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'Control + n' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys = "n";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenNewWindowSave'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class OpenNewWindowSaveParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'blag' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "blag";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'demo.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "demo.ss";
        
        /// <summary>
        /// Type 'gg{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys1 = "gg{Enter}";
        
        /// <summary>
        /// Type 'g' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText1 = "g";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Select 'demo' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "demo";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HelpText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class HelpTextParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenNothing'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class OpenNothingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Maximize'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class MaximizeParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Restore window 'Spreadsheet'
        /// </summary>
        public bool UISpreadsheetWindowRestored = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InvalidTokens'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class InvalidTokensParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=+' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "=+";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=aa1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText1 = "=aa1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText2 = "";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Save'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SaveParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'x{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys = "x{Enter}";
        
        /// <summary>
        /// Type 'xs' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "xs";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'moo' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText1 = "moo";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenInNewWindow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class OpenInNewWindowParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'lol' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "lol";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Control + s' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys1 = "s";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Saving'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class SavingParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'eatingfood' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "eatingfood";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Control + s' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys1 = "s";
        
        /// <summary>
        /// Select 'newfile' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "newfile";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select '' in 'Items View' list box
        /// </summary>
        public string UIItemsViewListSelectedItemsAsString = "";
        
        /// <summary>
        /// Type '{Enter}' in 'newfile.ss' list item
        /// </summary>
        public string UINewfilessListItemSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Delete}no{Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys2 = "{Delete}no{Enter}";
        
        /// <summary>
        /// Type 'nothing' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText1 = "nothing";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'Control + s' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys3 = "s";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Circular'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class CircularParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Tim\\Documents\\Visual Studio 2012\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Deb" +
            "ug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\x86\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\x86\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '={Enter}' in 'ssPanel' client
        /// </summary>
        public string UISsPanelClientSendKeys = "={Enter}";
        
        /// <summary>
        /// Type '=a1' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditText = "=a1";
        
        /// <summary>
        /// Type '{Enter}' in 'contentsTextBox' text box
        /// </summary>
        public string UIContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\ui1.ss");
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\ui2.ss");
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\demo.ss");
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\demo2.ss");
            #endregion
        }
        
        #region Properties
        public UISsPanelWindow UISsPanelWindow
        {
            get
            {
                if ((this.mUISsPanelWindow == null))
                {
                    this.mUISsPanelWindow = new UISsPanelWindow(this);
                }
                return this.mUISsPanelWindow;
            }
        }
        
        public UIContentsTextBoxWindow UIContentsTextBoxWindow
        {
            get
            {
                if ((this.mUIContentsTextBoxWindow == null))
                {
                    this.mUIContentsTextBoxWindow = new UIContentsTextBoxWindow(this);
                }
                return this.mUIContentsTextBoxWindow;
            }
        }
        
        public UIMenuStripMenuBar UIMenuStripMenuBar
        {
            get
            {
                if ((this.mUIMenuStripMenuBar == null))
                {
                    this.mUIMenuStripMenuBar = new UIMenuStripMenuBar(this);
                }
                return this.mUIMenuStripMenuBar;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIStatusStrip1Window UIStatusStrip1Window
        {
            get
            {
                if ((this.mUIStatusStrip1Window == null))
                {
                    this.mUIStatusStrip1Window = new UIStatusStrip1Window(this);
                }
                return this.mUIStatusStrip1Window;
            }
        }
        
        public UISpreadsheetTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        
        public UIItem6Window UIItem6Window
        {
            get
            {
                if ((this.mUIItem6Window == null))
                {
                    this.mUIItem6Window = new UIItem6Window(this);
                }
                return this.mUIItem6Window;
            }
        }
        
        public UISpreadsheetTitleBar1 UISpreadsheetTitleBar1
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar1 == null))
                {
                    this.mUISpreadsheetTitleBar1 = new UISpreadsheetTitleBar1(this);
                }
                return this.mUISpreadsheetTitleBar1;
            }
        }
        #endregion
        
        #region Fields
        private UISsPanelWindow mUISsPanelWindow;
        
        private UIContentsTextBoxWindow mUIContentsTextBoxWindow;
        
        private UIMenuStripMenuBar mUIMenuStripMenuBar;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        
        private UIItemWindow mUIItemWindow;
        
        private UIStatusStrip1Window mUIStatusStrip1Window;
        
        private UISpreadsheetTitleBar mUISpreadsheetTitleBar;
        
        private UIItem6Window mUIItem6Window;
        
        private UISpreadsheetTitleBar1 mUISpreadsheetTitleBar1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISsPanelWindow : WinWindow
    {
        
        public UISsPanelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ssPanel";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISsPanelClient
        {
            get
            {
                if ((this.mUISsPanelClient == null))
                {
                    this.mUISsPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISsPanelClient.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISsPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISsPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIContentsTextBoxWindow : WinWindow
    {
        
        public UIContentsTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentsTextBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentsTextBoxEdit
        {
            get
            {
                if ((this.mUIContentsTextBoxEdit == null))
                {
                    this.mUIContentsTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentsTextBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIContentsTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentsTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMenuStripMenuBar : WinMenuBar
    {
        
        public UIMenuStripMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\ui1.ss");
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\demo.ss");
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\demo2.ss");
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIOptionsMenuItem UIOptionsMenuItem
        {
            get
            {
                if ((this.mUIOptionsMenuItem == null))
                {
                    this.mUIOptionsMenuItem = new UIOptionsMenuItem(this);
                }
                return this.mUIOptionsMenuItem;
            }
        }
        
        public UIヘルプMenuItem UIヘルプMenuItem
        {
            get
            {
                if ((this.mUIヘルプMenuItem == null))
                {
                    this.mUIヘルプMenuItem = new UIヘルプMenuItem(this);
                }
                return this.mUIヘルプMenuItem;
            }
        }
        
        public UIオプションMenuItem UIオプションMenuItem
        {
            get
            {
                if ((this.mUIオプションMenuItem == null))
                {
                    this.mUIオプションMenuItem = new UIオプションMenuItem(this);
                }
                return this.mUIオプションMenuItem;
            }
        }
        
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIOptionsMenuItem mUIOptionsMenuItem;
        
        private UIヘルプMenuItem mUIヘルプMenuItem;
        
        private UIオプションMenuItem mUIオプションMenuItem;
        
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOptionsMenuItem : WinMenuItem
    {
        
        public UIOptionsMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Options";
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\ui1.ss");
            #endregion
        }
        
        #region Properties
        public UILanguageMenuItem UILanguageMenuItem
        {
            get
            {
                if ((this.mUILanguageMenuItem == null))
                {
                    this.mUILanguageMenuItem = new UILanguageMenuItem(this);
                }
                return this.mUILanguageMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UILanguageMenuItem mUILanguageMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UILanguageMenuItem : WinMenuItem
    {
        
        public UILanguageMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Language";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\ui1.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UI日本語MenuItem
        {
            get
            {
                if ((this.mUI日本語MenuItem == null))
                {
                    this.mUI日本語MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUI日本語MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "日本語";
                    this.mUI日本語MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUI日本語MenuItem.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\ui1.ss");
                    #endregion
                }
                return this.mUI日本語MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUI日本語MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIヘルプMenuItem : WinMenuItem
    {
        
        public UIヘルプMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "ヘルプ";
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\ui1.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIスプレッドシートを使い方MenuItem
        {
            get
            {
                if ((this.mUIスプレッドシートを使い方MenuItem == null))
                {
                    this.mUIスプレッドシートを使い方MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIスプレッドシートを使い方MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "スプレッドシートを使い方";
                    this.mUIスプレッドシートを使い方MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIスプレッドシートを使い方MenuItem.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\ui1.ss");
                    #endregion
                }
                return this.mUIスプレッドシートを使い方MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIスプレッドシートを使い方MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIオプションMenuItem : WinMenuItem
    {
        
        public UIオプションMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "オプション";
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\ui1.ss");
            #endregion
        }
        
        #region Properties
        public UI言語MenuItem UI言語MenuItem
        {
            get
            {
                if ((this.mUI言語MenuItem == null))
                {
                    this.mUI言語MenuItem = new UI言語MenuItem(this);
                }
                return this.mUI言語MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UI言語MenuItem mUI言語MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UI言語MenuItem : WinMenuItem
    {
        
        public UI言語MenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "言語";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\ui1.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIEnglishMenuItem
        {
            get
            {
                if ((this.mUIEnglishMenuItem == null))
                {
                    this.mUIEnglishMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIEnglishMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "English";
                    this.mUIEnglishMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIEnglishMenuItem.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\ui1.ss");
                    #endregion
                }
                return this.mUIEnglishMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIEnglishMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\ui1.ss");
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\demo.ss");
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\demo2.ss");
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\ui1.ss");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As...";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\demo.ss");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIOpeninNewWindowMenuItem
        {
            get
            {
                if ((this.mUIOpeninNewWindowMenuItem == null))
                {
                    this.mUIOpeninNewWindowMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpeninNewWindowMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open in New Window";
                    this.mUIOpeninNewWindowMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpeninNewWindowMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOpeninNewWindowMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\demo.ss");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUISaveAsMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIOpeninNewWindowMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIHowtouseSpreadsheetMenuItem
        {
            get
            {
                if ((this.mUIHowtouseSpreadsheetMenuItem == null))
                {
                    this.mUIHowtouseSpreadsheetMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHowtouseSpreadsheetMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "How to use Spreadsheet";
                    this.mUIHowtouseSpreadsheetMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHowtouseSpreadsheetMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIHowtouseSpreadsheetMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIHowtouseSpreadsheetMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "menuStrip";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIMenuStripMenuBar
        {
            get
            {
                if ((this.mUIMenuStripMenuBar == null))
                {
                    this.mUIMenuStripMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIMenuStripMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIMenuStripMenuBar.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIMenuStripMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIMenuStripMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISsPanelClient
        {
            get
            {
                if ((this.mUISsPanelClient == null))
                {
                    this.mUISsPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISsPanelClient.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISsPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISsPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIStatusStrip1Window : WinWindow
    {
        
        public UIStatusStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "statusStrip";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinStatusBar UIStatusStripStatusBar
        {
            get
            {
                if ((this.mUIStatusStripStatusBar == null))
                {
                    this.mUIStatusStripStatusBar = new WinStatusBar(this);
                    #region Search Criteria
                    this.mUIStatusStripStatusBar.SearchProperties[WinStatusBar.PropertyNames.Name] = "statusStrip1";
                    this.mUIStatusStripStatusBar.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIStatusStripStatusBar;
            }
        }
        #endregion
        
        #region Fields
        private WinStatusBar mUIStatusStripStatusBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetTitleBar : WinTitleBar
    {
        
        public UISpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItem6Window : WinWindow
    {
        
        public UIItem6Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentsTextBox";
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\demo.ss");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentsTextBoxEdit
        {
            get
            {
                if ((this.mUIContentsTextBoxEdit == null))
                {
                    this.mUIContentsTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentsTextBoxEdit.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\demo.ss");
                    #endregion
                }
                return this.mUIContentsTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentsTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetTitleBar1 : WinTitleBar
    {
        
        public UISpreadsheetTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UISaveWindow mUISaveWindow;
        
        private UICancelWindow mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetWindow1 : WinWindow
    {
        
        public UISpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        
        private UINOWindow mUINOWindow;
        
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIShellViewClient UIShellViewClient
        {
            get
            {
                if ((this.mUIShellViewClient == null))
                {
                    this.mUIShellViewClient = new UIShellViewClient(this);
                }
                return this.mUIShellViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UICancelWindow1 mUICancelWindow;
        
        private UIItemWindow21 mUIItemWindow2;
        
        private UIShellViewClient mUIShellViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITrappedincomputerssListItem UITrappedincomputerssListItem
        {
            get
            {
                if ((this.mUITrappedincomputerssListItem == null))
                {
                    this.mUITrappedincomputerssListItem = new UITrappedincomputerssListItem(this);
                }
                return this.mUITrappedincomputerssListItem;
            }
        }
        
        public UISomefilessListItem UISomefilessListItem
        {
            get
            {
                if ((this.mUISomefilessListItem == null))
                {
                    this.mUISomefilessListItem = new UISomefilessListItem(this);
                }
                return this.mUISomefilessListItem;
            }
        }
        
        public UIGalaxyS3ListItem UIGalaxyS3ListItem
        {
            get
            {
                if ((this.mUIGalaxyS3ListItem == null))
                {
                    this.mUIGalaxyS3ListItem = new UIGalaxyS3ListItem(this);
                }
                return this.mUIGalaxyS3ListItem;
            }
        }
        
        public UIItemsViewList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new UIItemsViewList(this);
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private UITrappedincomputerssListItem mUITrappedincomputerssListItem;
        
        private UISomefilessListItem mUISomefilessListItem;
        
        private UIGalaxyS3ListItem mUIGalaxyS3ListItem;
        
        private UIItemsViewList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UITrappedincomputerssListItem : WinListItem
    {
        
        public UITrappedincomputerssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "trappedincomputer.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISomefilessListItem : WinListItem
    {
        
        public UISomefilessListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "somefile.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIGalaxyS3ListItem : WinListItem
    {
        
        public UIGalaxyS3ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Galaxy S3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemsViewList : WinList
    {
        
        public UIItemsViewList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinListItem UINewfilessListItem
        {
            get
            {
                if ((this.mUINewfilessListItem == null))
                {
                    this.mUINewfilessListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUINewfilessListItem.SearchProperties[WinListItem.PropertyNames.Name] = "newfile.ss";
                    this.mUINewfilessListItem.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINewfilessListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUINewfilessListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIShellViewClient : WinClient
    {
        
        public UIShellViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Shell Folder View";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemsViewList.SearchProperties[WinList.PropertyNames.Name] = "Items View";
                    this.mUIItemsViewList.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetCUsersTimWindow : WinWindow
    {
        
        public UISpreadsheetCUsersTimWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - C:\\Users\\Tim\\Documents\\somefile.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\somefile.ss");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISsPanelWindow1 UISsPanelWindow
        {
            get
            {
                if ((this.mUISsPanelWindow == null))
                {
                    this.mUISsPanelWindow = new UISsPanelWindow1(this);
                }
                return this.mUISsPanelWindow;
            }
        }
        
        public UIItem0Window UIItem0Window
        {
            get
            {
                if ((this.mUIItem0Window == null))
                {
                    this.mUIItem0Window = new UIItem0Window(this);
                }
                return this.mUIItem0Window;
            }
        }
        
        public UIMenuStripMenuBar1 UIMenuStripMenuBar
        {
            get
            {
                if ((this.mUIMenuStripMenuBar == null))
                {
                    this.mUIMenuStripMenuBar = new UIMenuStripMenuBar1(this);
                }
                return this.mUIMenuStripMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        
        private UISsPanelWindow1 mUISsPanelWindow;
        
        private UIItem0Window mUIItem0Window;
        
        private UIMenuStripMenuBar1 mUIMenuStripMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\somefile.ss");
            #endregion
        }
        
        #region Properties
        public WinClient UISsPanelClient
        {
            get
            {
                if ((this.mUISsPanelClient == null))
                {
                    this.mUISsPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISsPanelClient.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\somefile.ss");
                    #endregion
                }
                return this.mUISsPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISsPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISsPanelWindow1 : WinWindow
    {
        
        public UISsPanelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ssPanel";
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\somefile.ss");
            #endregion
        }
        
        #region Properties
        public WinClient UISsPanelClient
        {
            get
            {
                if ((this.mUISsPanelClient == null))
                {
                    this.mUISsPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISsPanelClient.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\somefile.ss");
                    #endregion
                }
                return this.mUISsPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISsPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItem0Window : WinWindow
    {
        
        public UIItem0Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentsTextBox";
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\somefile.ss");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentsTextBoxEdit
        {
            get
            {
                if ((this.mUIContentsTextBoxEdit == null))
                {
                    this.mUIContentsTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentsTextBoxEdit.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\somefile.ss");
                    #endregion
                }
                return this.mUIContentsTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentsTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMenuStripMenuBar1 : WinMenuBar
    {
        
        public UIMenuStripMenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\somefile.ss");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\somefile.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\somefile.ss");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\somefile.ss");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetCUsersTimWindow1 : WinWindow
    {
        
        public UISpreadsheetCUsersTimWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet - C:\\Users\\Tim\\Documents\\newfile.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\newfile.ss");
            #endregion
        }
        
        #region Properties
        public UISsPanelWindow2 UISsPanelWindow
        {
            get
            {
                if ((this.mUISsPanelWindow == null))
                {
                    this.mUISsPanelWindow = new UISsPanelWindow2(this);
                }
                return this.mUISsPanelWindow;
            }
        }
        
        public UIEatingfoodWindow UIEatingfoodWindow
        {
            get
            {
                if ((this.mUIEatingfoodWindow == null))
                {
                    this.mUIEatingfoodWindow = new UIEatingfoodWindow(this);
                }
                return this.mUIEatingfoodWindow;
            }
        }
        
        public UIMenuStripMenuBar2 UIMenuStripMenuBar
        {
            get
            {
                if ((this.mUIMenuStripMenuBar == null))
                {
                    this.mUIMenuStripMenuBar = new UIMenuStripMenuBar2(this);
                }
                return this.mUIMenuStripMenuBar;
            }
        }
        
        public UISpreadsheetCUsersTimTitleBar UISpreadsheetCUsersTimTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetCUsersTimTitleBar == null))
                {
                    this.mUISpreadsheetCUsersTimTitleBar = new UISpreadsheetCUsersTimTitleBar(this);
                }
                return this.mUISpreadsheetCUsersTimTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UISsPanelWindow2 mUISsPanelWindow;
        
        private UIEatingfoodWindow mUIEatingfoodWindow;
        
        private UIMenuStripMenuBar2 mUIMenuStripMenuBar;
        
        private UISpreadsheetCUsersTimTitleBar mUISpreadsheetCUsersTimTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISsPanelWindow2 : WinWindow
    {
        
        public UISsPanelWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ssPanel";
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\newfile.ss");
            #endregion
        }
        
        #region Properties
        public WinClient UISsPanelClient
        {
            get
            {
                if ((this.mUISsPanelClient == null))
                {
                    this.mUISsPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISsPanelClient.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\newfile.ss");
                    #endregion
                }
                return this.mUISsPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISsPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIEatingfoodWindow : WinWindow
    {
        
        public UIEatingfoodWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "contentsTextBox";
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\newfile.ss");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentsTextBoxEdit
        {
            get
            {
                if ((this.mUIContentsTextBoxEdit == null))
                {
                    this.mUIContentsTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentsTextBoxEdit.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\newfile.ss");
                    #endregion
                }
                return this.mUIContentsTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentsTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMenuStripMenuBar2 : WinMenuBar
    {
        
        public UIMenuStripMenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\newfile.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIFileMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
                    this.mUIFileMenuItem.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\newfile.ss");
                    #endregion
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetCUsersTimTitleBar : WinTitleBar
    {
        
        public UISpreadsheetCUsersTimTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\newfile.ss");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet - C:\\Users\\Tim\\Documents\\newfile.ss");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
